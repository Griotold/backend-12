plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.11'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'// 테스트시에는 h2 데이터베이스
}

tasks.named('test') {
	useJUnitPlatform()
}

// JaCoCo 리포트 생성 설정
jacocoTestReport {
	reports {
		html.required = true // HTML 리포트 생성
		xml.required = false
		csv.required = false
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							"**/dto/**",
							"**/config/**",
							"**/exception/**"
					])
				})
		)
	}

	dependsOn test
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.7 // 최소 70% 커버리지 요구
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification
